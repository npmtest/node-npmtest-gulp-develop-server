{"/home/travis/build/npmtest/node-npmtest-gulp-develop-server/test.js":"/* istanbul instrument in package npmtest_gulp_develop_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-develop-server/lib.npmtest_gulp_develop_server.js":"/* istanbul instrument in package npmtest_gulp_develop_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_develop_server = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_develop_server = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-develop-server/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-develop-server && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_develop_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_develop_server\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_develop_server.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_develop_server.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_develop_server.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_develop_server.__dirname + '/lib.npmtest_gulp_develop_server.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-develop-server/node_modules/gulp-develop-server/index.js":"'use strict';\n\nvar _          = require( 'lodash' ),\n\tgutil      = require( 'gulp-util' ),\n\tTransform  = require( 'stream' ).Transform,\n\tfork       = require( 'child_process' ).fork,\n\tpluginName = 'gulp-develop-server';\n\n\nvar defaultOptions = {\n\tpath: '',\n\tenv: _.extend( { NODE_ENV: 'development' }, process.env ),\n\targs: [],\n\texecArgv: [],\n\tdelay: 600,\n\tsuccessMessage: /^[Ss]erver listening/,\n\terrorMessage: /[Ee]rror:/,\n\tkillSignal: 'SIGTERM'\n};\n\n\nfunction done( error, message, callback ) {\n\t// fallback arguments\n\tif( typeof message === 'function' ) {\n\t\tcallback = message;\n\t}\n\n\t// print message\n\telse if( ! error && typeof message === 'string' ) {\n\t\tgutil.log( message );\n\t}\n\n\t// run callback\n\tif( typeof callback === 'function' ) {\n\t\tcallback( error || null );\n\t}\n\n\treturn app;\n}\n\n\nfunction processUncaughtExceptionListener( event ) {\n\tapp.kill( function() {\n\t\tgutil.log( gutil.colors.red( 'Development server has error.' ) );\n\t\tconsole.log( event.name, event.message );\n\t\tconsole.log( event.toString() );\n\t});\n}\n\n\nfunction processExitListener() {\n\tapp.kill();\n}\n\n\nfunction handlingProcessEvent() {\n\n\t// unbind previous process events\n\tprocess.removeListener( 'uncaughtException', processUncaughtExceptionListener );\n\tprocess.removeListener( 'exit', processExitListener );\n\n\t// when other gulp-plugin throw exeption, kill server process\n\tprocess.on( 'uncaughtException', processUncaughtExceptionListener );\n\n\t// when gulp exit, kill server process\n\tprocess.once( 'exit', processExitListener );\n}\n\n\nfunction serverStream( options ) {\n\tvar stream = new Transform( { objectMode: true } ),\n\t\tisStream = false;\n\n\t// override default options\n\tif( ! app.child && typeof options === 'object' ) {\n\t\t_.merge( app.options, options );\n\t}\n\n\tstream._transform = function( file, encoding, callback ) {\n\t\tvar pushFile = function() {\n\t\t\tstream.push( file );\n\t\t\tcallback();\n\t\t};\n\n\t\tif( ! isStream ) {\n\t\t\tisStream = true;\n\t\t\treturn app.changed( pushFile );\n\t\t}\n\n\t\tpushFile();\n\t};\n\n\tstream.on( 'finish', function() {\n\t\tisStream = false;\n\t});\n\n\treturn stream;\n}\n\n\nvar app = module.exports = serverStream;\n\napp.child = null;\n\napp.isChanged = false;\n\napp.options = _.cloneDeep( defaultOptions );\n\n\napp.listen = function( options, callback ) {\n\n\t// throw error when options is not set\n\tif( ! app.options.path && typeof options.path !== 'string' ) {\n\t\tthrow new gutil.PluginError( pluginName, 'application `path` required.' );\n\t}\n\n\t// fallback arguments\n\tif( typeof options === 'function' ) {\n\t\tcallback = options;\n\t\toptions = {};\n\t}\n\n\t// server already started\n\tif( app.child && app.child.connected ) {\n\t\treturn done( 'Development server already started.', callback );\n\t}\n\n\t// override default options\n\tif( typeof options === 'object' ) {\n\t\t_.merge( app.options, options );\n\t}\n\n\t// run server process\n\tvar child = fork( app.options.path, app.options.args, {\n\t\tcwd:      app.options.cwd,\n\t\tenv:      app.options.env,\n\t\texecPath: app.options.execPath,\n\t\texecArgv: app.options.execArgv,\n\t\tgid:      app.options.gid,\n\t\tuid:      app.options.uid,\n\t\tsilent:   true\n\t});\n\n\tvar timer;\n\n\tvar initialized = _.once( function( error ) {\n\t\tif( timer ) {\n\t\t\ttimer = clearTimeout( timer );\n\t\t}\n\n\t\tif( error ) {\n\t\t\tgutil.log( gutil.colors.red( error ) );\n\t\t\tdone( error, callback );\n\t\t}\n\t\telse {\n\t\t\tvar pid = gutil.colors.magenta( child.pid );\n\t\t\tapp.child = child;\n\t\t\tdone( null, 'Development server listening. (PID:' + pid + ')', callback );\n\t\t}\n\n\t\tchild.stderr.removeListener( 'data', errorListener );\n\t\tchild.removeListener( 'message', successMessageListener );\n\t});\n\n\t// initialized by timer using `delay`\n\tif( app.options.delay > 0 ) {\n\t\ttimer = setTimeout( initialized, app.options.delay );\n\t}\n\n\t// initialized by `successMessage`\n\tvar successMessageListener = function( message ) {\n\t\tif( typeof message === 'string' && message.match( app.options.successMessage ) ) {\n\t\t\tinitialized();\n\t\t}\n\t};\n\tchild.on( 'message', successMessageListener );\n\n\t// initialized by `errorMessage` if server printed error\n\tvar errorListener = function( error ) {\n\t\tif( error instanceof Buffer && error.toString().match( app.options.errorMessage ) ) {\n\t\t\tinitialized( 'Development server has error.' );\n\t\t}\n\t};\n\tchild.stderr.on( 'data', errorListener );\n\n\t// handling exit of child process\n\tchild.once( 'exit', function() {\n\t\tapp.child = null;\n\t});\n\n\t// pipe child_process's stdout / stderr\n\tchild.stdout.pipe( process.stdout );\n\tchild.stderr.pipe( process.stderr );\n\n\t// bind process event\n\thandlingProcessEvent();\n\n\treturn app;\n};\n\n\n\napp.kill = function( signal, callback ) {\n\n\t// fallback arguments\n\tif( typeof signal === 'function' ) {\n\t\tcallback = signal;\n\t\tsignal = app.options.killSignal;\n\t}\n\telse {\n\t\tsignal = signal || app.options.killSignal;\n\t}\n\n\t// send kill signal\n\tif( app.child ) {\n\t\tvar pid = gutil.colors.magenta( app.child.pid );\n\n\t\tvar stopped = function() {\n\t\t\tdone( null, 'Development server was stopped. (PID:' + pid + ')', callback );\n\t\t};\n\n\t\tapp.child.once( 'close', stopped );\n\t\tapp.child.kill( signal );\n\n\t\treturn app;\n\t}\n\n\t// server already stopped\n\treturn done( 'Development server already stopped.', callback );\n};\n\n\napp.changed = app.restart = function( callback ) {\n\n\t// ensure restart when child process cannot connect\n\tif( app.child && !app.child.connected ) {\n\t\tapp.child = null;\n\t}\n\n\t// already called this function\n\tif( app.isChanged ) {\n\t\treturn done( null, 'Development server already received restart requests.', callback );\n\t}\n\n\t// restart server\n\tvar restarted = function( error ) {\n\t\tapp.isChanged = false;\n\t\treturn done( error, gutil.colors.cyan( 'Development server was restarted.' ), callback );\n\t};\n\n\tif( app.child ) {\n\t\tapp.isChanged = true;\n\t\treturn app.kill( function() {\n\t\t\tapp.listen( restarted );\n\t\t});\n\t}\n\n\t// if server not started, try to start using options.path\n\telse if( app.options.path ) {\n\t\tapp.isChanged = true;\n\t\treturn app.listen( restarted );\n\t}\n\n\t// server not started\n\tthrow new gutil.PluginError( pluginName, 'Development server not started.' );\n};\n\n\napp.reset = function( signal, callback ) {\n\n\t// fallback arguments\n\tif( typeof signal === 'function' ) {\n\t\tcallback = signal;\n\t\tsignal = app.options.killSignal;\n\t}\n\telse {\n\t\tsignal = signal || app.options.killSignal;\n\t}\n\n\t// kill server process and then reset options\n\tvar stopped = function( error ) {\n\t\tapp.options = _.cloneDeep( defaultOptions );\n\t\tdone( error, callback );\n\t};\n\n\treturn app.kill( signal, stopped );\n};\n"}